$scoreSheetSize: 1544px;

.score-sheet-container {
  width: $scoreSheetSize;
  height: $scoreSheetSize;
  position: relative;

  &[data-slideshow='0'] {
    .slideshow-left,
    .slideshow-right {
      display: none;
    }
  }

  .slideshow-left,
  .slideshow-right {
    position: absolute;
    height: 100%;
    width: 70px;
    z-index: 3;
    top: 0;
    cursor: pointer;

    .arrow {
      position: absolute;
      height: 30px;
      width: 30px;
      margin-top: -15px;
      top: 50%;
      display: block;
      border-width: 5px 5px 0 0;
      border-style: solid;
      border-color: #fafafa;
      opacity: 0.35;
      outline: 0;
      z-index: 4;

      &:hover {
        opacity: 1;
        border-color: white;
      }
    }
    &:hover .arrow {
      opacity: 1;
      border-color: white;
    }
  }

  .slideshow-left {
    left: 0;
    background: linear-gradient(90deg, rgb(40, 40, 40) 0%, rgba(255, 255, 255, 0) 100%);
    .arrow {
      left: 25px;
      transform: rotate(-135deg);
    }
  }

  .slideshow-right {
    right: 0;
    background: linear-gradient(90deg, rgba(255, 255, 255, 0) 0%, rgb(40, 40, 40) 100%);
    .arrow {
      right: 25px;
      transform: rotate(45deg);
    }
  }

  .score-sheet-holder {
    width: $scoreSheetSize;
    height: $scoreSheetSize;
    position: relative;
    overflow: hidden;
    transform-origin: top left;
  }

  .score-sheet {
    width: $scoreSheetSize;
    height: $scoreSheetSize;
    background-image: url('img/board.jpg');
    background-size: 100%;
    position: absolute;
    top: 0;
    left: 0;

    [data-board='1'] & {
      background-image: url('img/board_icecream.jpg');
    }

    /*****************************
  ******************************
  ********* UPPER PART *********
  ******************************
  *****************************/
    /////////// CITY NAME ////////////
    .cityname {
      position: absolute;
      width: 207px;
      height: 70px;
      word-break: break-all;
      @include handwritten;
      @include centered;
      font-size: 32px;

      @each $board, $s in $cityName {
        [data-board='#{$board}'] & {
          top:map-get($s, 'top');
          left:map-get($s, 'left');
        }
      }
    }

    /////////// HOUSES ////////////
    .house {
      position: absolute;
      width: 70px;
      height: 86px;
      box-sizing: border-box;
      clip-path: polygon(0 0, 100% 0, 100% 70px, 45px 70px, 45px 86px, 11px 86px, 11px 70px, 0 70px);

      &.built {
        border: 2px solid black;

        .house-number {
          margin: auto;
          @include handwritten;
          @include centered;
          font-size: 55px;
          line-height: 61px;

          span {
            font-size: 40px;
            font-family: Times;
            font-style: italic;
            margin-left: 2px;
          }
        }
      }

      @each $board, $h in $houses {
        [data-board='#{$board}'] & {
          @each $x, $street in $h {
            @each $y, $house in $street {
              &[data-x='#{$x}'][data-y='#{$y}'] {
                left: map-get($house, 'left');
                top: map-get($house, 'top');
              }
            }
          }
        }
      }

      &.unselectable:not(.built) {
        background-color: rgba(155, 155, 155, 0.8);
        cursor: not-allowed;
      }

      &.selectable {
        cursor: pointer;
        background: rgba(255, 0, 0, 0.5);
        background-image: url('img/truelle.png');
        background-size: contain;
        animation: 2s ease-in-out 0.5s infinite alternate hammerHighlight;
        @keyframes hammerHighlight {
          from {
            opacity: 1;
          }
          to {
            opacity: 0;
          }
        }

        /*
        &:hover {
          opacity:1;
          animation-name: none;
        }
        */
      }
    }

    /////////// FENCES ////////////
    .top-fence {
      position: absolute;
      width: 96px;
      height: 11px;
      box-sizing: border-box;
    }

    .estate-fence {
      position: absolute;
      height: 180px;
      width: 12px;
      box-sizing: border-box;
      border-radius: 5px;
      border-width: 2px;
      @include highlight;
      &.selectable {
        animation: borderBlink2 0.9s infinite;
      }
    }

    @each $board, $f in $fences {
      [data-board='#{$board}'] & {
        @each $x, $street in $f {
          $left: map-get($street, 'left');
          .estate-fence[data-x='#{$x}'][data-y='-1'] {
            left: $left - 6px;
            top: map-get($street, 'top') - 11px;
          }

          @for $y from 1 through length(map-get($street, 'widths')) {
            .top-fence[data-x='#{$x}'][data-y='#{$y - 1}'] {
              left: $left;
              top: map-get($street, 'top');
              width: nth(map-get($street, 'widths'), $y);
            }

            $left: $left + nth(map-get($street, 'widths'), $y);

            .estate-fence[data-x='#{$x}'][data-y='#{$y - 1}'] {
              left: $left - 6px;
              top: map-get($street, 'top') - 11px;
            }
          }
        }
      }
    }

    /////////// POOLS /////////////
    .pool {
      position: absolute;
      height: 45px;
      width: 45px;
      box-sizing: border-box;

      @each $board, $pp in $pools {
        [data-board='#{$board}'] & {
          @for $i from 1 through length($pp) {
            $p: nth($pp, $i);
            &[data-x="#{map-get($p,'x')}"][data-y="#{map-get($p,'y')}"] {
              left: map-get($p, 'left');
              top: map-get($p, 'top');
            }
          }
        }
      }

      svg.ladder {
        display: none;

        path {
          animation: blinkColor linear 0.9s infinite;
          stroke: white;
          stroke-width: 2px;
        }

        @keyframes blinkColor {
          0% {
            fill: red;
          }
          49% {
            fill: red;
          }
          50% {
            fill: black;
          }
          100% {
            fill: black;
          }
        }
      }

      &.selectable {
        cursor: pointer;
        svg.ladder {
          display: block;
        }
      }
    }

    /////////// PARKS ////////////
    .park {
      position: absolute;
      height: 50px;
      width: 50px;
      box-sizing: border-box;

      @each $board, $pp in $parks {
        [data-board='#{$board}'] & {
          @each $x, $street in $pp {
            $left: map-get($street, 'left');
            @for $y from 1 through map-get($street, 'n') {
              &[data-x='#{$x}'][data-y='#{$y - 1}'] {
                left: $left + ($y - 1) * 52px;
                top: map-get($street, 'top');
              }
            }
          }
        }
      }

      &.selectable {
        cursor: pointer;
        svg.highlight {
          display: block;
        }
      }

      svg {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
      }

      svg.highlight {
        display: none;

        .park-black {
          fill: rgba(255, 0, 0, 0.4);
          stroke: black;
          stroke-width: 2px;
        }
        .park-white {
          fill: none;
          stroke: white;
          stroke-width: 2px;
          stroke-dasharray: 20;
          animation: snake linear 0.9s infinite;
        }

        @keyframes snake {
          0% {
            stroke-dashoffset: 40;
          }
          100% {
            stroke-dashoffset: 0;
          }
        }
      }
    }

    /////////// ESTATES ////////////
    .estate {
      position: absolute;
      box-sizing: border-box;
      background-color: rgba(255, 0, 0, 0.4);
      cursor: pointer;
      display: none;
      svg {
        width: 100%;
        height: 100%;
        display: none;
      }

      &.selected {
        display: block;
        background-color: rgba(0, 255, 0, 0.4);
        border: 6px solid black;
        border-radius: 6px;

        &.selectable svg {
          display: none;
        }
      }

      &.selectable {
        display: block;

        svg {
          display: block;

          rect:first-of-type {
            fill: none;
            stroke: white;
            stroke-width: 10;
          }

          rect:last-of-type {
            fill: none;
            stroke: black;
            stroke-width: 10;
            stroke-dasharray: 10;
            animation: snake linear 0.7s infinite;
          }
        }

        &:hover svg rect:last-of-type {
          animation: none;
          stroke-dasharray: 0;
        }
      }
    }

    /*****************************
  ******************************
  ********* LOWER PART *********
  ******************************
  *****************************/
    /////////// POOLS ////////////
    .score-pool {
      position: absolute;
      height: 45px;
      width: 45px;
      box-sizing: border-box;
      border-radius: 10px;
      @include highlight;

      @each $board, $s in $scorePools {
        $scoreTop:map-get($s, 'top');
        $scoreLeft:map-get($s, 'left');

        [data-board='#{$board}'] & {
          @for $x from 1 through 9 {
            &[data-x='#{$x - 1}'] {
              $i: ceil($x / 2);
              top: nth($scoreTop, $i);
              left: if($x % 2 == 1, nth($scoreLeft, 1), nth($scoreLeft, 2));
            }
          }
        }
      }
    }

    /////////// TEMP ////////////
    .score-temp {
      position: absolute;
      height: 42px;
      width: 42px;
      transform: rotate(45deg);
      box-sizing: border-box;

      @each $board, $s in $scoreTemps {
        [data-board='#{$board}'] & {
          @for $x from 1 through 11 {
            &[data-x='#{$x - 1}'] {
              top: map-get(nth($s, $x), 'top');
              left: map-get(nth($s, $x), 'left');
            }
          }
        }
      }
    }

    /////////// ESTATES ////////////
    .score-estate {
      position: absolute;
      width: 40px;
      height: 40px;
      box-sizing: border-box;
      border-radius: 10px;
      @include highlight;

      @each $board, $s in $scoreEstates {
        [data-board='#{$board}'] & {
          @for $x from 1 through 6 {
            @for $y from 1 through map-get(nth($s, $x), 'n') {
              &[data-x='#{$x - 1}'][data-y='#{$y - 1}'] {
                top: map-get(nth($s, $x), 'top') + ($y - 1) * 44px;
                left: map-get(nth($s, $x), 'left');
              }
            }
          }
        }
      }
    }

    /////////// BIS ////////////
    .score-bis {
      position: absolute;
      height: 45px;
      width: 45px;
      box-sizing: border-box;

      @each $board, $s in $scoreBis {
        $scoreTop:map-get($s, 'top');
        $scoreLeft:map-get($s, 'left');

        [data-board='#{$board}'] & {
          @for $x from 1 through 9 {
            &[data-x='#{$x - 1}'] {
              $i: ceil($x / 2);
              top: nth($scoreTop, $i);
              left: if($x % 2 == 1, nth($scoreLeft, 1), nth($scoreLeft, 2));
            }
          }
        }
      }
    }

    /////////// PERMIT REFUSAL ////////////
    .permit-refusal {
      position: absolute;
      height: 53px;
      width: 50px;
      box-sizing: border-box;
      clip-path: polygon(50% 0, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
      @include highlight;

      &.selectable {
        animation: backgroundBlink 0.9s infinite;
      }

      @each $board, $s in $permitRefusal {
        $scoreTop:map-get($s, 'top');
        $scoreLeft:map-get($s, 'left');

        [data-board='#{$board}'] & {
          @for $x from 1 through 3 {
            &[data-x='#{$x - 1}'] {
              top: nth($scoreTop, $x);
              left: $scoreLeft;
            }
          }
        }
      }
    }

    /////////// ROUNDABOUT ////////////
    .score-roundabout {
      position: absolute;
      height: 53px;
      width: 50px;
      box-sizing: border-box;

      @each $board, $s in $scoreRoundabout {
        $scoreTop:map-get($s, 'top');
        $scoreLeft:map-get($s, 'left');

        [data-board='#{$board}'] & {
          @for $x from 1 through 2 {
            &[data-x='#{$x - 1}'] {
              top: nth($scoreTop, $x);
              left: $scoreLeft;
            }
          }
        }
      }
    }

    /*****************************
    ******************************
    *********** SCORES  **********
    ******************************
    *****************************/
    .score-counter {
      position: absolute;
      width: 68px;
      height: 68px;
      @include centered;
      @include handwritten;
      font-size: 42px;

      @each $board, $counters in $scoreCounters {
        [data-board='#{$board}'] & {
          @each $id, $pos in $counters {
            &.score_#{$id} {
              top:nth($pos, 1);
              left:nth($pos, 2);
            }
          }
        }
      }
    }



    /*****************************
    ******************************
    ******* PIN ANIMATIONS  ******
    ******************************
    *****************************/
    .scoresheet-overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 1544px;
      height: 1544px;
      background: rgba(0, 0, 0, 0.3);
      opacity: 0;
      display: none;
      z-index: 2;

      &.fadein {
        display: block;
        animation: 0.7s ease-in-out fadeIn;
        animation-fill-mode: forwards;
        @keyframes fadeIn {
          from {
            opacity: 0;
          }
          to {
            opacity: 1;
          }
        }
      }
      &.fadeout {
        display: block;
        animation: 1s ease-in-out fadeOut;
        animation-fill-mode: forwards;
        @keyframes fadeOut {
          from {
            opacity: 1;
          }
          to {
            opacity: 0;
          }
        }
      }
    }

    .scoresheet-pin {
      z-index: 3;
      position: absolute;
      width: 167px;
      height: 160px;
      transform-origin: bottom center;

      .pin-avatar {
        position: absolute;
        top: 35px;
        left: 10px;
        width: 92px;
        height: 88px;
        background-size: contain;
        background-repeat: no-repeat;
        background-color: rgba(200, 200, 200, 0.9);
      }

      .pin-frame {
        position: absolute;
        top: 0;
        left: 0;
        width: 167px;
        height: 160px;
        background: url('img/pin-more.png');
        background-size: cover;
        background-repeat: no-repeat;
      }

      .pin-number {
        position: absolute;
        right: 0;
        top: 37px;
        width: 46px;
        height: 85px;
        color: white;
        font-size: 60px;
        font-family: 'Bebas';
        @include centered;
      }

      &[data-n='0'] {
        width: 112px;
        .pin-frame {
          background-image: url('img/pin.png');
          width: 112px;
        }
        .pin-number {
          display: none;
        }
      }

      &.popin {
        animation: 0.7s ease-in-out popIn;
        animation-fill-mode: forwards;
        @keyframes popIn {
          0% {
            transform: translateY(0) scale(0.1);
            opacity: 0;
          }
          30% {
            opacity: 1;
          }
          70% {
            transform: translateY(-30px) scale(1.1);
          }
          100% {
            transform: scale(1);
          }
        }
      }

      &.popout {
        animation: 1s ease-in-out popOut;
        animation-fill-mode: forwards;
        @keyframes popOut {
          0% {
            transform: scale(1);
          }
          30% {
            transform: translateY(-30px) scale(1.1);
            opacity: 1;
          }
          80% {
            opacity: 0;
          }
          100% {
            transform: translateY(0) scale(0.1);
          }
        }
      }
    }
  }
}
